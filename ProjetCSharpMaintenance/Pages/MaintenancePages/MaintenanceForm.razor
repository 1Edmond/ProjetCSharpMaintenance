@page "/maintenances/add"
@page "/maintenances/{MaintenanceId}"
@inject ISnackbar snackbar
@inject IDBService<Maintenance> maintenanceService
@inject IDBService<TypeMaintenance> typeMaintenanceService
@inject IMaintenanceNotification notification
@inject NavigationManager NavManager


<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Vous devez remplir tous les champs pour créer un maintenance
            </MudText>
        </MudItem>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Error="libelleErrorState" ErrorText="@libelleErrorStateText" Label="Libelle" HelperText="Le libelle du type de la maintenance"
                                  @bind-Value="model.Libelle" For="@(() => model.Libelle)" />
                    <MudTextField Label="Description" Class="mt-3" Error="descriptionErrorState" ErrorText="@descriptionErrorStateText" HelperText="La description dy type de la maintenance"
                                  @bind-Value="model.Description" For="@(() => model.Description)" />
                    <MudSelect T="TypeMaintenance" Text="Type de maintenance" Error="typeMaintenanceErrorState"
                               ErrorText="@typeMaintenanceErrorStateText"
                        @bind-Value="@TypeMaintenanceSelected" Label="Type de maintenance" AdornmentIcon="@Icons.Material.Filled.TireRepair">
                        @foreach (var item in typeMaintenances)
                        {
                            <MudSelectItem T="TypeMaintenance" Value="@item">@item.Libelle</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@subtmitText</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

    </MudGrid>
</EditForm>

@code {

    [Parameter]
    public string MaintenanceId { get; set; }
    Maintenance model = new Maintenance();
    string descriptionErrorStateText = "", libelleErrorStateText = "", typeMaintenanceErrorStateText = "", subtmitText = "Ajouter";
    private TypeMaintenance TypeMaintenanceSelected { get; set; } = null;
    private IEnumerable<TypeMaintenance> typeMaintenances { get; set; } = new List<TypeMaintenance>();


    bool VerifyFiled()
    {
        descriptionErrorState = libelleErrorState = typeMaintenanceErrorState = false;
        if (String.IsNullOrEmpty(model.Libelle))
        {
            libelleErrorState = true;
            libelleErrorStateText = "Le libelle de la maintenance ne doit pas être vide.";
            return false;
        }
        if (String.IsNullOrEmpty(model.Description))
        {
            descriptionErrorState = true;
            descriptionErrorStateText = "Le description de la maintenance ne doit pas être vide.";
            return false;
        }
        if (TypeMaintenanceSelected == null)
        {
            typeMaintenanceErrorState = true;
            typeMaintenanceErrorStateText = "Le type de la maintenance ne doit pas être vide.";
            return false;
        }
        return true;
    }



    bool descriptionErrorState = false, libelleErrorState = false, typeMaintenanceErrorState = false;

    async Task<bool> Add() => await maintenanceService.Add(model) > 0;
    async Task<bool> Update() => await maintenanceService.Update(model) > 0;



    private async Task OnValidSubmit(EditContext context)
    {
        if (VerifyFiled())
        {
            var rep = false;
            model.TypeMaintenanceId = TypeMaintenanceSelected.Id;
            if (subtmitText == "Ajouter")
            {
                model.UtilisateurId = AppConstants.CurrentUser.Id;
                model.Id = Guid.NewGuid();
                rep = await Add();
            }
            else
                rep = await Update();
            if (rep)
            {
                if (subtmitText == "Ajouter")
                    await notification.ShowSccessNotification($"Ajout de la maintenance {model.Libelle} réussie", snackbar);
                else
                    await notification.ShowSccessNotification($"Mise à jour de la maintenance {model.Libelle}  réussie", snackbar);
                model = new();
            }
            else
            {
                await notification.ShowErrorNotification("Erreur l'ajout n'a pas pu être réalisé", snackbar);
            }
        }
        else
        {
            await notification.ShowErrorNotification("Erreur données incorrectes", snackbar);
        }
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        var temp = await typeMaintenanceService.GetAll();
        typeMaintenances = temp.ToList().Where(x => x.Etat == 0);
        if(typeMaintenances.Count() == 0)
        {
            await notification.ShowInfoNotification("Vous n'avez aucun type de maintenance, veuillez en ajouter.", snackbar);
            NavManager.NavigateTo($"/typeMaintenances/add");
            return;
        }
        if (Guid.TryParse(MaintenanceId, out Guid id))
        {
            var response = await maintenanceService.GetById(id);
            if (response != null)
            {
                model.Libelle = response.Libelle;
                model.Description = response.Description;
                model.Etat = response.Etat;
                model.UtilisateurId = response.UtilisateurId;
                model.TypeMaintenanceId = response.TypeMaintenanceId;
                model.Id = response.Id;
                subtmitText = "Modifier";
                TypeMaintenanceSelected = typeMaintenances.FirstOrDefault(x => x.Id == model.TypeMaintenanceId);
            }
        }
    }



}
